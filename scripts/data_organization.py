import os
import requests


def download_fasta_files(pdb_ids_str, output_dir):
    # Ensure the output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Split the comma-separated string into a list
    pdb_ids = [pdb_id.strip().upper() for pdb_id in pdb_ids_str.split(",")]

    # Loop through each PDB ID and download its FASTA
    for pdb_id in pdb_ids:
        url = f"https://www.rcsb.org/fasta/entry/{pdb_id}"
        response = requests.get(url)

        if response.status_code == 200:
            fasta_path = os.path.join(output_dir, f"{pdb_id}.fasta")
            with open(fasta_path, "w") as f:
                f.write(response.text)
            print(f"Downloaded: {pdb_id}")
        else:
            print(f"Failed to download: {pdb_id} (HTTP {response.status_code})")


# Example usage
pdb_ids = "8D9R,8D9S,8D9T,8D9U,7UXH,6DLW,5FMW,6VMK,8GZN,2XWJ,8D9W,6NCA,5MU8,7UXC,6E5B,8RRO,3PVM,6HV3,6HV4,6HV5,6HV7,6HVA,6HVR,6HVS,6HVT,6HVU,6HVV,6HVW,9FSV,6AVO,8D4G,8D4F,8B0H,8D9V,8D4D,8D4C,4L29,4L3C,4Z5R,7UX2,4RAU,3G6J,3L89,9ARV,5FO9,9CLS,5FOA,9CMO,9CLN,5W1V,5W1W,8UH2,5E6I,7RM4,5D2L,2IAN,8AYH,5JTW,3HAE,8D7I,2XNX,8DEW,8D4E,8RRH,2O7U,2HOD,2HPC,7UX3,5IRO,3IT8,7YTD,6NCF,3S9L,3S9M,3S9N,8VRW,3VE1,8VSP,6VMJ,1SUV,3L3O,3OHX,7YTC,3T4A,5YOY,4A5W,8QK3,4MXW,7TPP,9CTH,2VXS,8XX7,2XRC,7XQ8,8DE6,6LXW,6YMQ,3EO1,6XJA,7UVL,8D7K,4C56,6RP9,3H44,4RAL,7ZGJ,3ALQ,7ZGK,6LX3,7B2M,8OVB,6ZD0,8ZNI,8HNK,8K2X,8U1U,8COE,5WUX,7PHR,4GG6,4MXV,8K9R,8K9T,3O6F,9AST,7PQO,7QIV,6YO6,8Z8M,6RSY,2XNY,5XOV,6CQQ,6CQR,3UTS,4EUP,3VXU,2F54,3UTT,4E41,4DEP,5NME,5NBQ,5NMG,7NDT,8RLV,5WKF,5WKH,5NMF,5HYJ,3L5N,7O7F,5YXU,2J8U,8K4V,8K50,5TCA,5TCC,8HK2,1N73,5FO7,6WWZ,8I9L,6LFM,6GL1,8ZJG,2NOJ,1N86,7TA6,1FZF,8GMN,8XX6,1N8E,1FZB,7XA3,7RKM,7RKN,7RKF,8XX3,8XXH,1FZA,1FZE,7VL9,7VLA,8IC0,8XWV,7Y64,8VGO,6LFO,7VON,8XGM,5WTB,7TUZ,6VJA,8JZP,6SOY,7JRD,7N88,8XXX,8IA2,8HQC,5DYH,7YKD,8JZZ,7PI6,3V92,6N2W,1LT9,1RE4,1RF0,4DY7,8RL7,4X1D,9H49,9H4V,2HAU,2HAV,5E9D,6YNH,8DNS,9L3W,2J3O,8SG1,8JJP,8RTN,3NMS,7AKV,3OJY,9L3Y,7YUD,7YUF,8KAE,3CDG,3V89,3CII,3IYP,1SEB,7XBX,1YGR,1YGU,4BIK,3T0E,7F1R,3QZW,7F1Q,6Y90,6P9U,6Y92,1R5I,7KPB,2OJE,4YPG,8HK5,7CGW,3INB,7WKX,8U32,8R4A,6EWC,2C8I,5WJL,5WJN,6PPG,7BXA,8YP1,4AYE,4GJX,4J6L,4R9Y,7YUB,8K4O,8B8R,5GGR,7VY6,4LMF,5JXE,5FUG,5DFV,8YJF,4HZH,5FUC,7TUY,1E0F,8B9F,7C9W,4AYM,6ILJ,6ILK,8RLC,9EKD,9EKE,1OJY,7JIC,1M11,8UF7,7WSP,6ADE,1FG9,4EMZ,4EN2,7ZAN,1RH2,1UPN,4NQS,8XWS,2A45,6LA5,6YJP,7VY5,2NYZ,6X81,6X82,6X83,6X85,6X86,2TUN,4NFT,2PMS,1HEZ,2OSL,6D7G,3S7G,4D2N,3OED,4DJZ,3O11,7QDO,7KP7,6T8U,1YMM,4KKD,1AXS,1D5B,5KWG,6V0Y,6V19,7RK7,3UX9,3W0W,5NHT,5NQK,8XWY,6V13,6V15,1BBJ,4WUU,4X5X,5HYT,6RPA,1FYT,4IW4,7L1D,1AO7,8VR9,2GJ6,2IAM,3D39,3D3V,3H9S,3PWP,4FTV,6DKP,6ZKY,7NDQ,7NDU,4JFE,5W1F,8VRA,7STF,1QRN,1QSE,1QSF,3QDG,4L3E,6FCZ,3GSN,4MNQ,5HHO,5MEN,6EQB,4QOK,2ESV,6EQA,8UDR,3QDM,5BRZ,3QEQ,3PGC,3PGD,4GBX,5V4N,2BCK,4M8Q,4ODX,5LAX,2QY0,8W18,4J1Y,3SE4,6QZA,7WSO,3SE3,6Y9A,3QXA,8TBP,1BX2,4GKN,6G3K,3AM8,3I6K,3VXO,5MEP,6QZD,6SS9,1HHG,1I1F,1I7T,2X4S,1KPR,1KTL,1MHE,6GGM,6GHN,8JHQ,2FSE,3DI2,6ATZ,8DY1,5HHX,6RPT,4GRG,6YYE,7KP8,5FMV,5IUS,6EJG,8QUT,8QV5,8QV6,6GPX,6SZW,6UJ6,1LFH,1N76,6EK2,1P9M,2ZCL,7WVM,2ZCH,3BSQ,3QYT,5H52,5WTD,5X5P,5Y6K,6CTC,6JAS,7FFM,7FFU,8BRC,1BTJ,3GPD,5WB2,1L5T,8JPS,4TWT,4BOH,1ADQ,8YWQ,1AKJ,1JWM,1JWS,3HKJ,1LO5,5J11,5J12,9F6P,9F6Q,5IMT,6WIR,4ZS7,8YWR,7CHY,8FY1,8FY2,1HXY,3QDZ,4G3Y,3PS5,6XKR,7Z4T,1HLT,1AWH,6HG4,6HG9,8ASF,3WD5,4XT1,8U31,4N4X,3RPX,4NO0,1P7Q,4RN6,3I08,1TQ0,1MH0,1YJD,6CYM,8XWN,8JHR,1P8V,6Y97,8XVU,8XWA,8XWF,1NUH,1JL4,4NZQ,4O03,8RL8,8RLD,7MZT,1HIG,1JRH,8FJ0,1EGJ,2B3O,1EKU,1FCC,4DN4,1KG0,1OK1,1OK9,1Q8M,5T1A,2BDN,5M4R,1RS0,4M76,8XWM,7F1T,6RMJ,4KGH,4KGO,5I7J,5I7K,5I7L,5IQ7,2XA0,6OP0,1TNF,2ZPX,6OOZ,1KYN,3BKY,8TCB,8UQE,1ML0,8G92,2XWA,8UQC,8UQD,8EX4,8EX5,8EX6,8EX7,8EX8,2QXG,1DFB,3U7W,7YTE,2J61,5HZP,7AMG,1HKL,6GPS,8DVG,3DNK,6WI8,8FK9,3GOV,6BIV,6AT9,3RPG,1HHH,4MJ6,5WWI,5WXD,1B0R,5FDW,5WWU,4I48,8IQL,2XPG,5F9J,1A6A,5AGW,2HPP,2HPQ,8HLM,2HLA,3HLA,8HLL,1HLA,3P3P,4E06,6TKJ,7ZJM,9F7I,2O84,7WKI,1MD8,1MD7,1NRO,1NRN,1NRP,1NRQ,3VXF,3U3Q,3U3S,3U3T,3U3V,1C4Y,1BMM,1BMN,1D3Q,1D3T,1DWB,1DWC,1DWD,1DWE,2BVX,2BXU,1HDT,4AYV,4AYY,4AZ2,1UVS,3EE0,6PXQ,2DP4,4J6N,1TNR,4J38,5FN6,7VCL,3J24,5ELI,4MUC,4LOT,8CDG,8B7W,5TCX,4ZRY,3ONA,5DVK,5DVM,6A7U,5HYU,5HYP,5MJ0,6ROZ,6SM5,1SK3,5FM9,41BI,4J6Q,2VJ3,4CUE,4D0F,2QZH,6MV7,1H2P,1H2Q,1UN5,1UOT,1K58,4AHI,4AHN,7PNJ,8WZS,5FR6"
output_folder = "/home/visitor/Desktop/homoSapien_humoralImmuneResponse"

#download_fasta_files(pdb_ids, output_folder)


import os
import shutil

def organize_openfold_dataset(base_dir):
    # Define target directories
    mmcif_dir = os.path.join(base_dir, "pdb_data", "mmcifs")
    fasta_dir = os.path.join(base_dir, "sequences")

    # Create directories if they don't exist
    os.makedirs(mmcif_dir, exist_ok=True)
    os.makedirs(fasta_dir, exist_ok=True)

    # Loop over all files in base_dir
    for filename in os.listdir(base_dir):
        filepath = os.path.join(base_dir, filename)

        if os.path.isfile(filepath):
            if filename.lower().endswith(".cif"):
                shutil.move(filepath, os.path.join(mmcif_dir, filename))
                print(f"Moved .cif: {filename}")
            elif filename.lower().endswith(".fasta"):
                shutil.move(filepath, os.path.join(fasta_dir, filename))
                print(f"Moved .fasta: {filename}")

# Set your base directory
base_path = "/home/visitor/Desktop/homoSapien_humoralImmuneResponse"
organize_openfold_dataset(base_path)
